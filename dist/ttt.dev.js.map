{"version":3,"sources":["ttt.js"],"names":["generateVariants","NumberInput","document","getElementById","value","trim","isValidNumber","alert","variants","i","variant","generateVariant","push","result","innerHTML","forEach","input","test","index","number","parseInt","toString"],"mappings":";;AAAA;AACA,SAASA,gBAAT,GAA4B;AACxB;AACA,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,CAA6CC,IAA7C,EAApB,CAFwB,CAIxB;;AACA,MAAI,CAACC,aAAa,CAACL,WAAD,CAAlB,EAAiC;AAC7BM,IAAAA,KAAK,CAAC,WAAD,CAAL;AACA;AACH,GARuB,CAUxB;;;AACA,MAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAMC,OAAO,GAAGC,eAAe,CAACV,WAAD,EAAcQ,CAAd,CAA/B;AACAD,IAAAA,QAAQ,CAACI,IAAT,CAAcF,OAAd;AACH,GAfuB,CAiBxB;;;AACA,MAAMG,MAAM,GAAGX,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACAU,EAAAA,MAAM,CAACC,SAAP,GAAmB,EAAnB,CAnBwB,CAmBD;;AACvBN,EAAAA,QAAQ,CAACO,OAAT,CAAiB,UAAAL,OAAO,EAAI;AACxBG,IAAAA,MAAM,CAACC,SAAP,iBAA0BJ,OAA1B;AACH,GAFD;AAGH,C,CAED;;;AACA,SAASJ,aAAT,CAAuBU,KAAvB,EAA8B;AAC1B,SAAO,QAAQC,IAAR,CAAaD,KAAb,CAAP,CAD0B,CACE;AAC/B,C,CAED;;;AACA,SAASL,eAAT,CAAyBV,WAAzB,EAAsCiB,KAAtC,EAA6C;AACzC,MAAIC,MAAM,GAAGC,QAAQ,CAACnB,WAAD,CAArB,CADyC,CACL;AAEpC;;AACAkB,EAAAA,MAAM,IAAID,KAAV,CAJyC,CAMzC;;AACA,SAAOC,MAAM,CAACE,QAAP,EAAP;AACH","sourcesContent":["// 定义生成变体的函数\nfunction generateVariants() {\n    // 获取输入的数字\n    const NumberInput = document.getElementById('NumberInput').value.trim();\n\n    // 检查输入的是否是数字\n    if (!isValidNumber(NumberInput)) {\n        alert('请输入有效的数字！');\n        return;\n    }\n\n    // 生成三个变体并显示结果\n    const variants = [];\n    for (let i = 0; i < 3; i++) {\n        const variant = generateVariant(NumberInput, i);\n        variants.push(variant);\n    }\n\n    // 显示变体结果\n    const result = document.getElementById('result');\n    result.innerHTML = ''; // 清空结果区域\n    variants.forEach(variant => {\n        result.innerHTML += `<p>${variant}</p>`;\n    });\n}\n\n// 检查输入的是否是数字\nfunction isValidNumber(input) {\n    return /^\\d+$/.test(input); // 使用正则表达式检查是否是纯数字\n}\n\n// 生成单个变体的函数（整体逐位递增）\nfunction generateVariant(NumberInput, index) {\n    let number = parseInt(NumberInput); // 将输入的数字转换为整数\n\n    // 在原数字的基础上逐位递增\n    number += index;\n\n    // 将递增后的数字转换为字符串返回\n    return number.toString();\n}\n"],"file":"ttt.dev.js"}