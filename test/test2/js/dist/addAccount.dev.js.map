{"version":3,"sources":["addAccount.js"],"names":["generateVariants","NumberInput","document","getElementById","value","trim","isValidNumber","alert","variants","i","variant","generateVariant","push","result","innerHTML","forEach","input","test","index","number","incrementedNumber","parseInt","toString","padStart","length"],"mappings":";;;;;;;;;AAAA;AAEA;AACO,SAASA,gBAAT,GAA4B;AAC/B,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,CAA6CC,IAA7C,EAApB;;AAEA,MAAI,CAACC,aAAa,CAACL,WAAD,CAAlB,EAAiC;AAC7BM,IAAAA,KAAK,CAAC,WAAD,CAAL;AACA;AACH;;AAED,MAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAMC,OAAO,GAAGC,eAAe,CAACV,WAAD,EAAcQ,CAAd,CAA/B;AACAD,IAAAA,QAAQ,CAACI,IAAT,CAAcF,OAAd;AACH;;AAED,MAAMG,MAAM,GAAGX,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACAU,EAAAA,MAAM,CAACC,SAAP,GAAmB,EAAnB,CAf+B,CAeR;;AACvBN,EAAAA,QAAQ,CAACO,OAAT,CAAiB,UAAAL,OAAO,EAAI;AACxBG,IAAAA,MAAM,CAACC,SAAP,iBAA0BJ,OAA1B;AACH,GAFD;AAGA,SAAOF,QAAP;AACH,C,CAED;;;AACO,SAASF,aAAT,CAAuBU,KAAvB,EAA8B;AACjC,SAAO,QAAQC,IAAR,CAAaD,KAAb,CAAP;AACH,C,CAED;;;AACO,SAASL,eAAT,CAAyBV,WAAzB,EAAsCiB,KAAtC,EAA6C;AAChD,MAAIC,MAAM,GAAGlB,WAAb;AACA,MAAImB,iBAAiB,GAAGC,QAAQ,CAACF,MAAD,CAAR,GAAmBD,KAA3C;AACA,MAAMR,OAAO,GAAGU,iBAAiB,CAACE,QAAlB,GAA6BC,QAA7B,CAAsCJ,MAAM,CAACK,MAA7C,EAAqD,GAArD,CAAhB;AACA,SAAOd,OAAP;AACH","sourcesContent":["// addAccount.js\n\n// 导出生成变体的函数\nexport function generateVariants() {\n    const NumberInput = document.getElementById('NumberInput').value.trim();\n\n    if (!isValidNumber(NumberInput)) {\n        alert('请输入有效的数字！');\n        return;\n    }\n\n    const variants = [];\n    for (let i = 1; i <= 3; i++) {\n        const variant = generateVariant(NumberInput, i);\n        variants.push(variant);\n    }\n\n    const result = document.getElementById('result');\n    result.innerHTML = ''; // 清空结果区域\n    variants.forEach(variant => {\n        result.innerHTML += `<p>${variant}</p>`;\n    });\n    return variants;\n}\n\n// 导出检查输入是否是数字的函数\nexport function isValidNumber(input) {\n    return /^\\d+$/.test(input);\n}\n\n// 导出生成单个变体的函数\nexport function generateVariant(NumberInput, index) {\n    let number = NumberInput;\n    let incrementedNumber = parseInt(number) + index;\n    const variant = incrementedNumber.toString().padStart(number.length, '0');\n    return variant;\n}\n"],"file":"addAccount.dev.js"}